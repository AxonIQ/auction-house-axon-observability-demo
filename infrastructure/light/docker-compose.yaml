version: '3'
services:
  axon-server:
    image: axoniq/axonserver-enterprise:2023.0.0-jdk-17-dev
    ports:
      - "9024:8024"
      - "9124:8124"
    environment:
      - axoniq_axonserver_hostname=axon-server
      - axoniq_axonserver_internal_hostname=axon-server
    env_file:
      - axonserver-variables.env
    volumes:
      - as-data:/axonserver/data
      - as-events:/axonserver/events
      - as-events-second-tier:/axonserver/events-secondtier
      - as-plugins:/axonserver/plugins
      - as-log:/axonserver/log
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8024/actuator/health" ]
      interval: 5s
      timeout: 10s
      retries: 30

  service-participants:
    image: ghcr.io/axoniq/axon-observability-participants
    ports:
      - '8900:8080'
    environment:
      - MM_TAG_APP=participants
      - spring_datasource_url=jdbc:postgresql://db-participants:5432/postgres
    env_file:
      - application-variables.env
    depends_on:
      db-participants:
        condition: service_started
      axon-server:
        condition: service_healthy
  db-participants:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5434:5432'

  service-auction-object-registry:
    image: ghcr.io/axoniq/axon-observability-auction-object-registry
    ports:
      - '8082:8080'
    environment:
      - MM_TAG_APP=object-registry
      - spring_datasource_url=jdbc:postgresql://db-object-registry:5432/postgres
    env_file:
      - application-variables.env
    depends_on:
      db-object-registry:
        condition: service_started
      axon-server:
        condition: service_healthy
  db-object-registry:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5435:5432'

  service-auction-query:
    image: ghcr.io/axoniq/axon-observability-auction-query
    environment:
      - MM_TAG_APP=auctionquery
      - spring_datasource_url=jdbc:postgresql://db-auction-query:5432/postgres
    env_file:
      - application-variables.env
    ports:
      - "8083:8080"
    depends_on:
      db-auction-query:
        condition: service_started
      axon-server:
        condition: service_healthy
  db-auction-query:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5436:5432'

  service-auctions:
    image: ghcr.io/axoniq/axon-observability-auctions
    ports:
      - '8084:8080'
    environment:
      - MM_TAG_APP=auctions
      - spring_datasource_url=jdbc:postgresql://db-auctions:5432/postgres
    env_file:
      - application-variables.env
    depends_on:
      db-auctions:
        condition: service_started
      axon-server:
        condition: service_healthy
  db-auctions:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5437:5432'

  service-interfaces:
    image: ghcr.io/axoniq/axon-observability-interfaces
    ports:
      - '8087:8080'
    environment:
      - MM_TAG_APP=interfaces
      - spring_datasource_url=jdbc:postgresql://db-interfaces:5432/postgres
    env_file:
      - application-variables.env
    depends_on:
      db-interfaces:
        condition: service_started
      axon-server:
        condition: service_healthy
  db-interfaces:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5438:5432'


  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-storage:/prometheus
    depends_on:
      - axon-server
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:10.0.1
    environment:
      GF_RENDERING_SERVER_URL: http://renderer:8081/render
      GF_RENDERING_CALLBACK_URL: http://grafana:3000/
      GF_LOG_FILTERS: rendering:debug
    volumes:
      - ./grafana.ini:/etc/grafana/grafana.ini
      - ./grafana-datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml
      - grafana-storage:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - renderer
  renderer:
    image: grafana/grafana-image-renderer:3.5.0
    ports:
    - "8081"

  nginx:
    image: morlack/axon-observability-landing
    ports:
      - "8080:80"
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - axon-server
      - service-auction-object-registry
      - service-auction-query
      - service-auctions
      - service-interfaces
      - service-participants
      - grafana

volumes:
  grafana-storage:
  prometheus-storage:
  as-data:
  as-events:
  as-events-second-tier:
  as-plugins:
  as-log:

